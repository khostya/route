// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/order.proto

package order

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeliverOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeliverOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliverOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliverOrderRequestMultiError, or nil if none found.
func (m *DeliverOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliverOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderID()) < 1 {
		err := DeliverOrderRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := DeliverOrderRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExp() == nil {
		err := DeliverOrderRequestValidationError{
			field:  "Exp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetExp(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = DeliverOrderRequestValidationError{
				field:  "Exp",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := DeliverOrderRequestValidationError{
					field:  "Exp",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	// no validation rules for WrapperType

	if m.GetWeightInKg() <= 0 {
		err := DeliverOrderRequestValidationError{
			field:  "WeightInKg",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPriceInRub() < 0 {
		err := DeliverOrderRequestValidationError{
			field:  "PriceInRub",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeliverOrderRequestMultiError(errors)
	}

	return nil
}

// DeliverOrderRequestMultiError is an error wrapping multiple validation
// errors returned by DeliverOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeliverOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliverOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliverOrderRequestMultiError) AllErrors() []error { return m }

// DeliverOrderRequestValidationError is the validation error returned by
// DeliverOrderRequest.Validate if the designated constraints aren't met.
type DeliverOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliverOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliverOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliverOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliverOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliverOrderRequestValidationError) ErrorName() string {
	return "DeliverOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeliverOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliverOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliverOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliverOrderRequestValidationError{}

// Validate checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderRequestMultiError, or nil if none found.
func (m *ReturnOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ReturnOrderRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnOrderRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderRequestMultiError) AllErrors() []error { return m }

// ReturnOrderRequestValidationError is the validation error returned by
// ReturnOrderRequest.Validate if the designated constraints aren't met.
type ReturnOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderRequestValidationError) ErrorName() string {
	return "ReturnOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderRequestValidationError{}

// Validate checks the field values on IssueOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueOrdersRequestMultiError, or nil if none found.
func (m *IssueOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := IssueOrdersRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := IssueOrdersRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return IssueOrdersRequestMultiError(errors)
	}

	return nil
}

// IssueOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by IssueOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type IssueOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueOrdersRequestMultiError) AllErrors() []error { return m }

// IssueOrdersRequestValidationError is the validation error returned by
// IssueOrdersRequest.Validate if the designated constraints aren't met.
type IssueOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueOrdersRequestValidationError) ErrorName() string {
	return "IssueOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueOrdersRequestValidationError{}

// Validate checks the field values on RefundOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundOrderRequestMultiError, or nil if none found.
func (m *RefundOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := RefundOrderRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderID()) < 1 {
		err := RefundOrderRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefundOrderRequestMultiError(errors)
	}

	return nil
}

// RefundOrderRequestMultiError is an error wrapping multiple validation errors
// returned by RefundOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundOrderRequestMultiError) AllErrors() []error { return m }

// RefundOrderRequestValidationError is the validation error returned by
// RefundOrderRequest.Validate if the designated constraints aren't met.
type RefundOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundOrderRequestValidationError) ErrorName() string {
	return "RefundOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundOrderRequestValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersRequestMultiError, or nil if none found.
func (m *ListOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserID != nil {

		if utf8.RuneCountInString(m.GetUserID()) < 1 {
			err := ListOrdersRequestValidationError{
				field:  "UserID",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Size != nil {

		if m.GetSize() <= 0 {
			err := ListOrdersRequestValidationError{
				field:  "Size",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Page != nil {

		if m.GetPage() <= 0 {
			err := ListOrdersRequestValidationError{
				field:  "Page",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListOrdersRequestMultiError(errors)
	}

	return nil
}

// ListOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersRequestMultiError) AllErrors() []error { return m }

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersResponseMultiError, or nil if none found.
func (m *ListOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrdersResponseMultiError(errors)
	}

	return nil
}

// ListOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersResponseMultiError) AllErrors() []error { return m }

// ListOrdersResponseValidationError is the validation error returned by
// ListOrdersResponse.Validate if the designated constraints aren't met.
type ListOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponseValidationError) ErrorName() string {
	return "ListOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponseValidationError{}

// Validate checks the field values on ListOrdersResponse_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersResponse_Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersResponse_Order with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersResponse_OrderMultiError, or nil if none found.
func (m *ListOrdersResponse_Order) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersResponse_Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RecipientID

	// no validation rules for Status

	if len(errors) > 0 {
		return ListOrdersResponse_OrderMultiError(errors)
	}

	return nil
}

// ListOrdersResponse_OrderMultiError is an error wrapping multiple validation
// errors returned by ListOrdersResponse_Order.ValidateAll() if the designated
// constraints aren't met.
type ListOrdersResponse_OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersResponse_OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersResponse_OrderMultiError) AllErrors() []error { return m }

// ListOrdersResponse_OrderValidationError is the validation error returned by
// ListOrdersResponse_Order.Validate if the designated constraints aren't met.
type ListOrdersResponse_OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponse_OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponse_OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponse_OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponse_OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponse_OrderValidationError) ErrorName() string {
	return "ListOrdersResponse_OrderValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponse_OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse_Order.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponse_OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponse_OrderValidationError{}
