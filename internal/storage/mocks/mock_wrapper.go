// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/wrapper.go
//
// Generated by this command:
//
//	mockgen -source ./mocks/wrapper.go -destination=./mocks/mock_wrapper.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	wrapper "homework/internal/model/wrapper"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockwrapperStorage is a mock of wrapperStorage interface.
type MockwrapperStorage struct {
	ctrl     *gomock.Controller
	recorder *MockwrapperStorageMockRecorder
}

// MockwrapperStorageMockRecorder is the mock recorder for MockwrapperStorage.
type MockwrapperStorageMockRecorder struct {
	mock *MockwrapperStorage
}

// NewMockwrapperStorage creates a new mock instance.
func NewMockwrapperStorage(ctrl *gomock.Controller) *MockwrapperStorage {
	mock := &MockwrapperStorage{ctrl: ctrl}
	mock.recorder = &MockwrapperStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwrapperStorage) EXPECT() *MockwrapperStorageMockRecorder {
	return m.recorder
}

// AddWrapper mocks base method.
func (m *MockwrapperStorage) AddWrapper(ctx context.Context, wrapper wrapper.Wrapper, orderId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWrapper", ctx, wrapper, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWrapper indicates an expected call of AddWrapper.
func (mr *MockwrapperStorageMockRecorder) AddWrapper(ctx, wrapper, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWrapper", reflect.TypeOf((*MockwrapperStorage)(nil).AddWrapper), ctx, wrapper, orderId)
}

// Delete mocks base method.
func (m *MockwrapperStorage) Delete(ctx context.Context, orderId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockwrapperStorageMockRecorder) Delete(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockwrapperStorage)(nil).Delete), ctx, orderId)
}

// GetByOrderId mocks base method.
func (m *MockwrapperStorage) GetByOrderId(ctx context.Context, orderId string) (wrapper.Wrapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderId", ctx, orderId)
	ret0, _ := ret[0].(wrapper.Wrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderId indicates an expected call of GetByOrderId.
func (mr *MockwrapperStorageMockRecorder) GetByOrderId(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderId", reflect.TypeOf((*MockwrapperStorage)(nil).GetByOrderId), ctx, orderId)
}
