// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go
//
// Generated by this command:
//
//	mockgen -source ./storage.go -destination=./mocks/mock_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "homework/internal/model"
	wrapper "homework/internal/model/wrapper"
	schema "homework/internal/storage/schema"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderRepo) AddOrder(ctx context.Context, order model.Order, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, order, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderRepoMockRecorder) AddOrder(ctx, order, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderRepo)(nil).AddOrder), ctx, order, hash)
}

// DeleteOrder mocks base method.
func (m *MockOrderRepo) DeleteOrder(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderRepoMockRecorder) DeleteOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderRepo)(nil).DeleteOrder), ctx, id)
}

// GetOrderById mocks base method.
func (m *MockOrderRepo) GetOrderById(ctx context.Context, id string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", ctx, id)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockOrderRepoMockRecorder) GetOrderById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderById), ctx, id)
}

// ListOrdersByIds mocks base method.
func (m *MockOrderRepo) ListOrdersByIds(ctx context.Context, ids []string, status model.Status) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersByIds", ctx, ids, status)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersByIds indicates an expected call of ListOrdersByIds.
func (mr *MockOrderRepoMockRecorder) ListOrdersByIds(ctx, ids, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersByIds", reflect.TypeOf((*MockOrderRepo)(nil).ListOrdersByIds), ctx, ids, status)
}

// ListUserOrders mocks base method.
func (m *MockOrderRepo) ListUserOrders(ctx context.Context, userId string, count uint, status model.Status) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOrders", ctx, userId, count, status)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserOrders indicates an expected call of ListUserOrders.
func (mr *MockOrderRepoMockRecorder) ListUserOrders(ctx, userId, count, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOrders", reflect.TypeOf((*MockOrderRepo)(nil).ListUserOrders), ctx, userId, count, status)
}

// RefundedOrders mocks base method.
func (m *MockOrderRepo) RefundedOrders(ctx context.Context, get schema.PageParam) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundedOrders", ctx, get)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundedOrders indicates an expected call of RefundedOrders.
func (mr *MockOrderRepoMockRecorder) RefundedOrders(ctx, get any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundedOrders", reflect.TypeOf((*MockOrderRepo)(nil).RefundedOrders), ctx, get)
}

// UpdateStatus mocks base method.
func (m *MockOrderRepo) UpdateStatus(ctx context.Context, ids schema.IdsWithHashes, status model.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, ids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderRepoMockRecorder) UpdateStatus(ctx, ids, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderRepo)(nil).UpdateStatus), ctx, ids, status)
}

// MockWrapperRepo is a mock of WrapperRepo interface.
type MockWrapperRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWrapperRepoMockRecorder
}

// MockWrapperRepoMockRecorder is the mock recorder for MockWrapperRepo.
type MockWrapperRepoMockRecorder struct {
	mock *MockWrapperRepo
}

// NewMockWrapperRepo creates a new mock instance.
func NewMockWrapperRepo(ctrl *gomock.Controller) *MockWrapperRepo {
	mock := &MockWrapperRepo{ctrl: ctrl}
	mock.recorder = &MockWrapperRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrapperRepo) EXPECT() *MockWrapperRepoMockRecorder {
	return m.recorder
}

// AddWrapper mocks base method.
func (m *MockWrapperRepo) AddWrapper(ctx context.Context, wrapper wrapper.Wrapper, orderId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWrapper", ctx, wrapper, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWrapper indicates an expected call of AddWrapper.
func (mr *MockWrapperRepoMockRecorder) AddWrapper(ctx, wrapper, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWrapper", reflect.TypeOf((*MockWrapperRepo)(nil).AddWrapper), ctx, wrapper, orderId)
}

// Delete mocks base method.
func (m *MockWrapperRepo) Delete(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWrapperRepoMockRecorder) Delete(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWrapperRepo)(nil).Delete), ctx, orderID)
}
