// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go
//
// Generated by this command:
//
//	mockgen -source ./storage.go -destination=./mocks/mock_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	dto "homework/internal/dto"
	model "homework/internal/model"
	wrapper "homework/internal/model/wrapper"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockorderRepo is a mock of orderRepo interface.
type MockorderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockorderRepoMockRecorder
}

// MockorderRepoMockRecorder is the mock recorder for MockorderRepo.
type MockorderRepoMockRecorder struct {
	mock *MockorderRepo
}

// NewMockorderRepo creates a new mock instance.
func NewMockorderRepo(ctrl *gomock.Controller) *MockorderRepo {
	mock := &MockorderRepo{ctrl: ctrl}
	mock.recorder = &MockorderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderRepo) EXPECT() *MockorderRepoMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockorderRepo) AddOrder(ctx context.Context, order model.Order, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, order, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockorderRepoMockRecorder) AddOrder(ctx, order, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockorderRepo)(nil).AddOrder), ctx, order, hash)
}

// DeleteOrder mocks base method.
func (m *MockorderRepo) DeleteOrder(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockorderRepoMockRecorder) DeleteOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockorderRepo)(nil).DeleteOrder), ctx, id)
}

// GetOrderById mocks base method.
func (m *MockorderRepo) GetOrderById(ctx context.Context, id string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", ctx, id)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockorderRepoMockRecorder) GetOrderById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockorderRepo)(nil).GetOrderById), ctx, id)
}

// ListOrdersByIds mocks base method.
func (m *MockorderRepo) ListOrdersByIds(ctx context.Context, ids []string, status model.Status) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersByIds", ctx, ids, status)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersByIds indicates an expected call of ListOrdersByIds.
func (mr *MockorderRepoMockRecorder) ListOrdersByIds(ctx, ids, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersByIds", reflect.TypeOf((*MockorderRepo)(nil).ListOrdersByIds), ctx, ids, status)
}

// ListUserOrders mocks base method.
func (m *MockorderRepo) ListUserOrders(ctx context.Context, userId string, count uint, status model.Status) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOrders", ctx, userId, count, status)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserOrders indicates an expected call of ListUserOrders.
func (mr *MockorderRepoMockRecorder) ListUserOrders(ctx, userId, count, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOrders", reflect.TypeOf((*MockorderRepo)(nil).ListUserOrders), ctx, userId, count, status)
}

// RefundedOrders mocks base method.
func (m *MockorderRepo) RefundedOrders(ctx context.Context, get dto.PageParam) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundedOrders", ctx, get)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundedOrders indicates an expected call of RefundedOrders.
func (mr *MockorderRepoMockRecorder) RefundedOrders(ctx, get any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundedOrders", reflect.TypeOf((*MockorderRepo)(nil).RefundedOrders), ctx, get)
}

// UpdateStatus mocks base method.
func (m *MockorderRepo) UpdateStatus(ctx context.Context, ids dto.IdsWithHashes, status model.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, ids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockorderRepoMockRecorder) UpdateStatus(ctx, ids, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockorderRepo)(nil).UpdateStatus), ctx, ids, status)
}

// MockwrapperRepo is a mock of wrapperRepo interface.
type MockwrapperRepo struct {
	ctrl     *gomock.Controller
	recorder *MockwrapperRepoMockRecorder
}

// MockwrapperRepoMockRecorder is the mock recorder for MockwrapperRepo.
type MockwrapperRepoMockRecorder struct {
	mock *MockwrapperRepo
}

// NewMockwrapperRepo creates a new mock instance.
func NewMockwrapperRepo(ctrl *gomock.Controller) *MockwrapperRepo {
	mock := &MockwrapperRepo{ctrl: ctrl}
	mock.recorder = &MockwrapperRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwrapperRepo) EXPECT() *MockwrapperRepoMockRecorder {
	return m.recorder
}

// AddWrapper mocks base method.
func (m *MockwrapperRepo) AddWrapper(ctx context.Context, wrapper wrapper.Wrapper, orderId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWrapper", ctx, wrapper, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWrapper indicates an expected call of AddWrapper.
func (mr *MockwrapperRepoMockRecorder) AddWrapper(ctx, wrapper, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWrapper", reflect.TypeOf((*MockwrapperRepo)(nil).AddWrapper), ctx, wrapper, orderId)
}

// Delete mocks base method.
func (m *MockwrapperRepo) Delete(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockwrapperRepoMockRecorder) Delete(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockwrapperRepo)(nil).Delete), ctx, orderID)
}
